#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <12>;
    };

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <1>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 16>;
    };

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    behaviors {
        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <240>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&kp>;

            require-prior-idle-ms = <175>;
        };

        slt: short_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;

            require-prior-idle-ms = <175>;
        };

        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <255>;
            require-prior-idle-ms = <255>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        leftbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <6 3>;
            require-prior-idle-ms = <100>;
        };

        rightbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <2 7>;
            require-prior-idle-ms = <100>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <25 26>;
        };

        leftbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <23 26>;
        };

        rightbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <22 27>;
        };

        leftparenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 16>;
        };

        rightparenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <12 17>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <6 7>;
        };

        quote {
            bindings = <&kp SQT>;
            key-positions = <16 17>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 12>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <26 27>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <3 2>;
        };

        warpd {
            bindings = <&kp LA(LG(Z))>;
            key-positions = <30 34>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <23 24>;
        };

        lefttab {
            bindings = <&kp LA(LG(LEFT))>;
            key-positions = <12 11>;
        };

        righttab {
            bindings = <&kp LA(LG(RIGHT))>;
            key-positions = <17 18>;
        };

        movetabright {
            bindings = <&kp LC(LS(PAGE_DOWN))>;
            key-positions = <18 19>;
        };

        movetableft {
            bindings = <&kp LC(LS(PAGE_UP))>;
            key-positions = <11 10>;
        };

        tick {
            bindings = <&kp GRAVE>;
            key-positions = <23 22>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
  &kp Q  &kp W  &kp F                 &kp P              &kp B        &kp J                     &kp L              &kp U             &kp Y    &kp SEMICOLON
  &kp A  &kp R  &bhm LEFT_GUI S       &bhm LEFT_SHIFT T  &kp G        &kp M                     &bhm LEFT_SHIFT N  &bhm RIGHT_GUI E  &kp I    &kp O
  &kp Z  &kp X  &kp C                 &bhm LCTRL D       &lt 3 V      &kp K                     &bhm RCTRL H       &kp COMMA         &kp DOT  &lt 3 FSLH
                &bhm LEFT_ALT ESCAPE  &slt 1 SPACE       &mkp LCLK    &bhm RIGHT_ALT BACKSPACE  &slt 2 ENTER
            >;
        };

        Navigation {
            label = "Navigation";
            bindings = <
  &none  &none  &none   &none           &none     &kp LG(LEFT)  &kp LA(LEFT)  &kp LA(RIGHT)  &kp LG(RIGHT)  &kp LC(LG(Q))
  &none  &none  &none   &kp LEFT_SHIFT  &none     &kp LEFT      &kp DOWN      &kp UP_ARROW   &kp RIGHT      &kp PAGE_UP
  &none  &none  &none   &none           &none     &none         &none         &none          &none          &kp PAGE_DOWN
                &trans  &trans          &trans    &trans        &trans
            >;
        };

        Raise {
            label = "Raise";
            bindings = <
  &kp C_PREVIOUS    &kp N1  &kp N2  &kp N3  &kp C_VOLUME_UP      &none   &none            &none  &none  &none
  &kp C_NEXT        &kp N4  &kp N5  &kp N6  &kp N0               &none   &kp RIGHT_SHIFT  &none  &none  &none
  &kp C_PLAY_PAUSE  &kp N7  &kp N8  &kp N9  &kp C_VOLUME_DOWN    &none   &none            &none  &none  &none
                            &trans  &trans  &trans               &trans  &trans
            >;
        };

        bt+boot {
            label = "bt+boot";
            bindings = <
  &bt BT_NXT    &bt BT_PRV  &none  &none            &none          &none        &none  &none  &none  &none
  &bt BT_CLR    &none       &none  &kp RIGHT_SHIFT  &none          &none        &none  &none  &none  &none
  &out OUT_TOG  &none       &none  &none            &bootloader    &bootloader  &none  &none  &none  &none
                            &none  &mkp RCLK        &none          &none        &none
            >;
        };
    };
};
