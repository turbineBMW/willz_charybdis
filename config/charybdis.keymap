#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2 3 4 5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <12>;
    };

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <1>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 16>;
    };

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    behaviors {
        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <240>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&kp>;

            require-prior-idle-ms = <175>;
        };

        slt: short_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;

            require-prior-idle-ms = <175>;
        };

        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <255>;
            require-prior-idle-ms = <255>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <8 9>;
            require-prior-idle-ms = <100>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
            require-prior-idle-ms = <100>;
        };

        bt+boot_right {
            bindings = <&mo 4>;
            key-positions = <5 6 7 8>;
        };

        bt+boot_left {
            bindings = <&mo 4>;
            key-positions = <1 2 3 4>;
            require-prior-idle-ms = <100>;
        };

        leftpar {
            bindings = <&kp LPAR>;
            key-positions = <23 24>;
            require-prior-idle-ms = <100>;
        };

        rightpar {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <25 26>;
            require-prior-idle-ms = <100>;
        };

        leftbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <13 14>;
            require-prior-idle-ms = <100>;
        };

        rightbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <15 16>;
            require-prior-idle-ms = <100>;
        };

        leftbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <3 4>;
            require-prior-idle-ms = <100>;
        };

        rightbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <5 6>;
            require-prior-idle-ms = <100>;
        };

        lt {
            bindings = <&kp LT>;
            key-positions = <22 23>;
            require-prior-idle-ms = <100>;
        };

        gt {
            bindings = <&kp GT>;
            key-positions = <26 27>;
            require-prior-idle-ms = <100>;
        };

        excl {
            bindings = <&kp EXCL>;
            key-positions = <2 3>;
            require-prior-idle-ms = <100>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <6 7>;
            require-prior-idle-ms = <100>;
        };

        caps {
            bindings = <&kp CLCK>;
            key-positions = <13 16>;
            require-prior-idle-ms = <100>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <12 17>;
        };

        mousemiddle {
            bindings = <&mkp MCLK>;
            key-positions = <32 31>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <27 28>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
  &kp Q         &kp W            &kp F       &kp P              &kp B        &kp J         &kp L              &kp U            &kp Y            &kp SEMICOLON
  &bhm LCTRL A  &bhm LEFT_ALT R  &kp S       &bhm LEFT_SHIFT T  &kp G        &kp M         &bhm LEFT_SHIFT N  &bhm LEFT_GUI E  &bhm LEFT_ALT I  &bhm LCTRL O
  &kp Z         &kp X            &kp C       &kp D              &lt 3 V      &lt 6 K       &lt 5 H            &kp COMMA        &kp DOT          &kp SLASH
                                 &kp ESCAPE  &slt 1 SPACE       &mkp LCLK    &slt 1 ENTER  &slt 2 BACKSPACE
            >;
        };

        Navigation {
            label = "Navigation";
            bindings = <
  &kp LS(TAB)  &kp TAB       &none         &kp INSERT      &kp HOME     &kp LG(LEFT)  &kp LA(LEFT)  &kp LA(RIGHT)  &kp LG(RIGHT)  &kp LC(LG(Q))
  &sk LCTRL    &sk LEFT_ALT  &sk LEFT_GUI  &sk LEFT_SHIFT  &kp END      &kp LEFT      &kp DOWN      &kp UP_ARROW   &kp RIGHT      &kp PAGE_UP
  &kp LC(Z)    &kp LC(X)     &kp LC(C)     &kp LC(V)       &kp LC(A)    &none         &none         &none          &none          &kp PAGE_DOWN
                             &trans        &trans          &trans       &trans        &trans
            >;
        };

        Raise {
            label = "Raise";
            bindings = <
  &kp N0        &kp N1  &kp N2    &kp N3    &kp PLUS     &kp PERCENT  &kp AT         &kp CARET         &kp GRAVE          &kp SEMI
  &kp ASTERISK  &kp N4  &kp N5    &kp N6    &kp MINUS    &kp UNDER    &kp AMPERSAND  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp COLON
  &kp EQUAL     &kp N7  &kp N8    &kp N9    &kp UP       &kp DOLLAR   &kp HASH       &kp TILDE         &kp PIPE           &kp BACKSLASH
                        &kp LEFT  &kp DOWN  &kp RIGHT    &trans       &trans
            >;
        };

        Fn {
            label = "Fn";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2   &kp F3   &kp F4
  &trans  &trans  &trans  &trans  &trans    &trans  &kp F5  &kp F6   &kp F7   &kp F8
  &trans  &trans  &trans  &trans  &trans    &trans  &kp F9  &kp F10  &kp F11  &kp F12
                  &trans  &trans  &trans    &trans  &trans
            >;
        };

        bt+boot {
            label = "bt+boot";
            bindings = <
  &bt BT_NXT    &bt BT_PRV  &none  &none  &none          &none        &none  &none  &none  &none
  &bt BT_CLR    &none       &none  &none  &none          &none        &none  &none  &none  &none
  &out OUT_TOG  &none       &none  &none  &bootloader    &bootloader  &none  &none  &none  &none
                            &none  &none  &none          &none        &none
            >;
        };

        macro-1 {
            bindings = <
  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &none       &none    &none  &none  &none  &none  &none
  &kp LG(N4)  &kp LG(N5)  &kp LG(N6)  &none       &none    &none  &none  &none  &none  &none
  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp LG(N0)  &none    &none  &none  &none  &none  &none
                          &none       &none       &none    &none  &none
            >;
        };

        macro-2 {
            bindings = <
  &kp LG(LS(N1))  &kp LG(LS(N2))  &kp LS(LG(N3))  &none           &none    &none  &none  &none  &none  &none
  &kp LG(LS(N4))  &kp LG(LS(N5))  &kp LG(LS(N6))  &none           &none    &none  &none  &none  &none  &none
  &kp LG(LS(N7))  &kp LG(LS(N8))  &kp LG(LS(N9))  &kp LS(LG(N0))  &none    &none  &none  &none  &none  &none
                                  &none           &none           &none    &none  &none
            >;
        };
    };
};
